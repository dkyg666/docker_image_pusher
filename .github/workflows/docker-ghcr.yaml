name: Docker GHCR

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  GHCR_USER: "${{ github.actor }}"
  GHCR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

   - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}


    - name: Build and push image to GitHub Container Registry
      run: |
        # 数据预处理,判断镜像是否重名
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            # 获取镜像的完整名称
            image=$(echo "$line" | awk '{print $NF}')
            # 将@sha256:等字符删除
            image="${image%%@*}"
            # 获取镜像名:版本号
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            # 获取命名空间
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            # 这里不要是空值影响判断
            name_space="${name_space}_"
            # 获取镜像名
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            
            # 如果镜像存在于数组中，则添加temp_map
            if [[ -n "${temp_map[$image_name]}" ]]; then
                 if [[ "${temp_map[$image_name]}" != $name_space  ]]; then
                    echo "警告：检测到重复镜像名: $image_name"
                    duplicate_images[$image_name]="true"
                 fi
            else
                temp_map[$image_name]=$name_space
            fi       
        done < images.txt
        
        # 处理并推送镜像
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
        
            echo "下载镜像: $line"
            docker pull $line
            platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
            # 处理架构前缀
            if [ -z "$platform" ]; then
                platform_prefix=""
            else
                platform_prefix="${platform//\//_}_"
            fi
            
            # 获取原始镜像名称
            image=$(echo "$line" | awk '{print $NF}')
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            image_name_tag="${image_name_tag%%@*}"  # 清理哈希值
        
            # 处理命名空间前缀
            name_space_prefix=""
            if [[ -n "${duplicate_images[$image_name]}" && -n "${name_space}" ]]; then
               name_space_prefix="${name_space}_"
            fi
            
            # 创建新的GHCR镜像名称
            new_image="ghcr.io/${{ github.repository_owner }}/$platform_prefix$name_space_prefix$image_name_tag"
            
            echo "标记镜像: $image -> $new_image"
            docker tag $image $new_image
            
            echo "推送镜像: $new_image"
            docker push $new_image
            
            echo "清理磁盘空间..."
            docker rmi $image
            docker rmi $new_image
            echo "磁盘清理完成"  
        done < images.txt
